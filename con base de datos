import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.LinkedList;
import java.sql.*;

// -------------------------------
// Clase Entrada (clave, valor)
// -------------------------------
class Entrada {
    int clave;
    int valor;

    public Entrada(int clave, int valor) {
        this.clave = clave;
        this.valor = valor;
    }
}

// -------------------------------
// Clase de conexión a SQLite
// -------------------------------
class ConexionDB {
    private static final String URL = "jdbc:sqlite:tablaHash.db";

    // Conectar
    public static Connection conectar() throws SQLException {
        return DriverManager.getConnection(URL);
    }

    // Crear tabla si no existe
    public static void crearTabla() {
        String sql = "CREATE TABLE IF NOT EXISTS hash ("
                   + "clave INTEGER PRIMARY KEY, "
                   + "valor INTEGER)";
        try (Connection conn = conectar();
             Statement stmt = conn.createStatement()) {
            stmt.execute(sql);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}

// -------------------------------
// Clase TablaHash en memoria + BD
// -------------------------------
class TablaHash {
    private final LinkedList<Entrada>[] tabla;
    private final int tamaño;

    @SuppressWarnings("unchecked")
    public TablaHash(int tamaño) {
        this.tamaño = tamaño;
        tabla = new LinkedList[tamaño];
        for (int i = 0; i < tamaño; i++) {
            tabla[i] = new LinkedList<>();
        }
        ConexionDB.crearTabla(); // Crea tabla en SQLite
    }

    // Función hash
    private int hash(int clave) {
        return clave % tamaño;
    }

    // -------------------
    // Métodos en memoria
    // -------------------
    public void insertar(int clave, int valor) {
        int indice = hash(clave);
        for (Entrada entrada : tabla[indice]) {
            if (entrada.clave == clave) {
                entrada.valor = valor; // Actualiza si existe
                return;
            }
        }
        tabla[indice].add(new Entrada(clave, valor));
    }

    public Integer buscar(int clave) {
        int indice = hash(clave);
        for (Entrada entrada : tabla[indice]) {
            if (entrada.clave == clave) {
                return entrada.valor;
            }
        }
        return null;
    }

    public boolean eliminar(int clave) {
        int indice = hash(clave);
        for (Entrada entrada : tabla[indice]) {
            if (entrada.clave == clave) {
                tabla[indice].remove(entrada);
                return true;
            }
        }
        return false;
    }

    public String mostrar() {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < tamaño; i++) {
            sb.append("[").append(i).append("]: ");
            for (Entrada entrada : tabla[i]) {
                sb.append("(").append(entrada.clave).append(" -> ").append(entrada.valor).append(") ");
            }
            sb.append("\n");
        }
        return sb.toString();
    }
// -------------------
    // Métodos con SQLite
    // -------------------
    public void insertarDB(int clave, int valor) {
        String sql = "INSERT OR REPLACE INTO hash (clave, valor) VALUES (?, ?)";
        try (Connection conn = ConexionDB.conectar();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setInt(1, clave);
            pstmt.setInt(2, valor);
            pstmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public Integer buscarDB(int clave) {
        String sql = "SELECT valor FROM hash WHERE clave = ?";
        try (Connection conn = ConexionDB.conectar();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setInt(1, clave);
            ResultSet rs = pstmt.executeQuery();
            if (rs.next()) {
                return rs.getInt("valor");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return null;
    }
public boolean eliminarDB(int clave) {
        String sql = "DELETE FROM hash WHERE clave = ?";
        try (Connection conn = ConexionDB.conectar();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setInt(1, clave);
            int filas = pstmt.executeUpdate();
            return filas > 0;
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

    public String mostrarDB() {
        StringBuilder sb = new StringBuilder();
        String sql = "SELECT * FROM hash";
        try (Connection conn = ConexionDB.conectar();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {
            while (rs.next()) {

sb.append("(").append(rs.getInt("clave"))
                  .append(" -> ").append(rs.getInt("valor"))
                  .append(") ");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return sb.toString();
    }
}

// -------------------------------
// GUI con integración a BD
// -------------------------------
public class TablaHashGUI {
    private static TablaHash hash;

    public static void main(String[] args) {
        hash = new TablaHash(5); // tabla de tamaño 5

        // Crear ventana JFrame
        JFrame frame = new JFrame("Tabla Hash con BD");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(500, 500);
        frame.setLayout(new BorderLayout());

        // Crear área de texto para mostrar la tabla
        JTextArea textArea = new JTextArea();
        textArea.setEditable(false);
        JScrollPane scrollPane = new JScrollPane(textArea);
        frame.add(scrollPane, BorderLayout.CENTER);

        // Panel para los controles
        JPanel panel = new JPanel();
        panel.setLayout(new GridLayout(3, 2));

        // Campos de texto para clave y valor
        JTextField claveField = new JTextField();
        JTextField valorField = new JTextField();
        panel.add(new JLabel("Clave:"));
        panel.add(claveField);
        panel.add(new JLabel("Valor:"));
        panel.add(valorField);

        // Botones
        JButton insertarBtn = new JButton("Insertar");
        JButton buscarBtn = new JButton("Buscar");
        JButton eliminarBtn = new JButton("Eliminar");
        panel.add(insertarBtn);
        panel.add(buscarBtn);
        panel.add(eliminarBtn);
        frame.add(panel, BorderLayout.NORTH);
        // Acción del botón "Insertar"
        insertarBtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    int clave = Integer.parseInt(claveField.getText());
                    int valor = Integer.parseInt(valorField.getText());
                    // Guardar en memoria y BD
                    hash.insertar(clave, valor);
                    hash.insertarDB(clave, valor);
                    textArea.setText("Insertado correctamente.\n"
                                   + "Tabla Hash (memoria):\n" + hash.mostrar()
                                   + "\nTabla Hash (BD):\n" + hash.mostrarDB());
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(frame, "Por favor, ingresa valores válidos para clave y valor.");
                }
            }
        });

        // Acción del botón "Buscar"
        buscarBtn.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    int clave = Integer.parseInt(claveField.getText());
                    Integer valorMemoria = hash.buscar(clave);
                    Integer valorBD = hash.buscarDB(clave);

                    String resultado = "Resultado de búsqueda:\n";
                    resultado += "En memoria: " + (valorMemoria != null ? valorMemoria : "No encontrado") + "\n";
                    resultado += "En BD: " + (valorBD != null ? valorBD : "No encontrado");
                    textArea.setText(resultado);
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(frame, "Por favor, ingresa una clave válida.");
                }
            }
        });


